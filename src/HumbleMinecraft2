import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.util.Duration;


import java.util.Random;

public class Minecraft extends Application {

    // constants for the game window size and block size
    private static final int WIDTH = 800;
    private static final int HEIGHT = 600;
    private static final int BLOCK_SIZE = 20;

    private GraphicsContext gc;

    // 2D array to represent the game world
    private Block[][] world;

    private int playerX, playerY;
    private int playerSpeed = 5;

    private Timeline gameLoop;


    @Override
    public void start(Stage primaryStage) {
        // Canvas to draw on
        Canvas canvas = new Canvas(WIDTH, HEIGHT);
        gc = canvas.getGraphicsContext2D();

        // creating a stack pane to hold the canvas
        StackPane root = new StackPane();
        root.getChildren().add(canvas);

        // create a scene and set it to the primary stage
        Scene scene = new Scene(root, WIDTH, HEIGHT);
        primaryStage.setScene(scene);
        primaryStage.show();

        initWorld();
         drawWorld();

        scene.setOnKeyPressed(event -> {            }
            switch (event.getCode()) {
                case W:
                    // Move player up
                    movePlayer(0, -playerSpeed);
                    break;
                case S:
                    // Move player down2
                    movePlayer(0, playerSpeed);
                    break;
                case A:
                    // Move player left
                    movePlayer(-playerSpeed, 0);
                    break;
                case D:
                    // Move player right
                    movePlayer(playerSpeed, 0);
                    break;
                case SPACE:
                    // Break block
                    breakBlock();
                    break;
            }
        });

        gameLoop = new Timeline(new KeyFrame(Duration.millis(16), e -> {
            // Update game logic here
            updateGame();
            drawWorld();
        }));
        gameLoop.setCycleCount(Animation.INDEFINITE);
        gameLoop.play();
    }

    // initializing the game world with random blocks
    private void initWorld() {
        world = new Block[WIDTH / BLOCK_SIZE][HEIGHT / BLOCK_SIZE];
        Random random = new Random();
        for (int x = 0; x < world.length; x++) {
            for (int y = 0; y < world[x].length; y++) {
                BlockType type = random.nextBoolean() ? BlockType.STONE : BlockType.AIR;
                world[x][y] = new Block(type);
            }
        }
        // set the player's initial position to the center of the world
        playerX = world.length / 2;
        playerY = world[0].length / 2;
        
        public class Minc mmain static void ((System.out.println(W));
        
        )
        
        System.out.pintln("El hechiczo se hace del revÃ§es nde los")

    }

    private void drawWorld() {
        gc.clearRect(0, 0, WIDTH, HEIGHT);
        for (int x = 0; x < world.length; x++) {
           0; x < world.length; x++) {
            for (int y = 0; y < world[x].length; y++) {
                Block block = world[x][y];
                if (block != null) {
                    if (block.getType() == BlockType.AIR) {
                        gc.setFill(Color.LIGHTGRAY);
                    } else {
                        gc.setFill(Color.DARKGRAY);
                    }
                    // draw a block at the current position
                    gc for (int y = 0; y < world[x].length;.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
                }
            
        }
        // drawing the player as a red block, as an example
        gc.setFill(Color.RED);
        gc.fillRect(playerX * BLOCK_SIZE, playerY * BLOCK_ y++) {
                Block block = world[x][y];
                if (block!= null) {
                    switch (block.getType()) {
SIZE, BLOCK_SIZE, BLOCK_SIZE);
    }

    // move the player by the given amount
    private void movePlayer(int dx, int dy) {
        int newX = playerX + dx / BLOCK_SIZE;
        int newY = playerY + dy / BLOCK_SIZE;
        if                        case STONE:
                            gc.setFill(Color.DARKGRAY);
                            break;
                        case AIR:
                            gc.setFill(Color.LIGHTGRAY);
                            break;
                        (newX >= 0 && newX < world.length && newY >= 0 && newY < world[0].length) {
            // check if the new position is not a solid block, to avoid present and future bugs
            if (world[newX][newY].getType() == BlockType.AIR) {
                playerX = newX;
                playerY = newY;
            } default:
                            gc.setFill(Color.WHITE);
                    }
                    // draw a block at the current position
                    gc.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);

        }
    }

    private void breakBlock() {
        Block block = world[playerX][playerY];
        if (block != null && !block.isBroken()) {
            block.breakBlock();
            new Thread(() -> {
                try {
                    Thread.sleep(500);
                } catch (Interrupted                }
            }
        }
        // drawing the player as a red block, as an example
        gc.setFill(Color.RED);
        gc.fillRect(player0; x < world.length; x++) {
            for (int y = 0; y < world[x].length; y++) {
                Block block = world[x][y];
                if (block!= null) {
                    switch (block.getType()) {
                        case STONE:
                            gc.setFillException e) {
                    e.printStackTrace();
                }
                // Update block state here
            }).start();
        }
    }

    private void updateGame() {
        // Update game logic here
    }

    public static void main(String[] args)X * BLOCK_SIZE, playerY * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
    }

    // move the player by the given amount
    private void movePlayer(int(Color.DARKGRAY);
                            break;
                        case AIR:
                            gc.setFill(Color.LIGHTGRAY);
                            break {
        launch(args);
    }
}
